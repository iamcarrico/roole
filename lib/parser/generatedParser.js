/**
 * Generated Parser
 *
 * Parse the input code.
 */
'use strict';

var generatedParser = module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successful,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var parseFunctions = {
        "root": parse_root,
        "selector": parse_selector,
        "mediaQuery": parse_mediaQuery
      };
      
      var options = arguments.length > 1 ? arguments[1] : {},
          startRule;
      
      if (options.startRule !== undefined) {
        startRule = options.startRule;
        
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Can't start parsing from rule " + quote(startRule) + ".");
        }
      } else {
        startRule = "root";
      }
      
      var pos = 0;
      var reportedPos = 0;
      var cachedReportedPos = 0;
      var cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function computeReportedPosDetails() {
        function advanceCachedReportedPos() {
          var ch;
          
          for (; cachedReportedPos < reportedPos; cachedReportedPos++) {
            ch = input.charAt(cachedReportedPos);
            if (ch === "\n") {
              if (!cachedReportedPosDetails.seenCR) { cachedReportedPosDetails.line++; }
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = false;
            } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
              cachedReportedPosDetails.line++;
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = true;
            } else {
              cachedReportedPosDetails.column++;
              cachedReportedPosDetails.seenCR = false;
            }
          }
        }
        
        if (cachedReportedPos !== reportedPos) {
          if (cachedReportedPos > reportedPos) {
            cachedReportedPos = 0;
            cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
          }
          advanceCachedReportedPos();
        }
        
        return cachedReportedPosDetails;
      }
      
      function offset() {
        return reportedPos;
      }
      
      function line() {
        return computeReportedPosDetails().line;
      }
      
      function column() {
        return computeReportedPosDetails().column;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_root() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        r3 = parse_multiLineComment();
        if (r3 !== null) {
          reportedPos = r4;
          r3 = (function(c) {return new N('comment', [c]);})(r3);
        }
        if (r3 === null) {
          pos = r4;
        }
        r3 = r3 !== null ? r3 : "";
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r6 = pos;
            r7 = pos;
            r8 = parse_rootRules();
            if (r8 !== null) {
              r9 = parse__();
              if (r9 !== null) {
                r5 = [r8, r9];
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(r) {return r;})(r8);
            }
            if (r5 === null) {
              pos = r6;
            }
            r5 = r5 !== null ? r5 : "";
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(comment, rules) {
        		if (!rules) rules = [];
        		if (comment) rules.unshift(comment);
        		return new N('root', rules);
        	})(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_rootRules() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_rootRule();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse__();
          if (r8 !== null) {
            r9 = parse_rootRule();
            if (r9 !== null) {
              r5 = [r8, r9];
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(r) {return r;})(r9);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse__();
            if (r8 !== null) {
              r9 = parse_rootRule();
              if (r9 !== null) {
                r5 = [r8, r9];
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(r) {return r;})(r9);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return rest;
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_rootRule() {
        var r0;
        
        r0 = parse_ruleset();
        if (r0 === null) {
          r0 = parse_assignment();
          if (r0 === null) {
            r0 = parse_media();
            if (r0 === null) {
              r0 = parse_void();
              if (r0 === null) {
                r0 = parse_block();
                if (r0 === null) {
                  r0 = parse_import();
                  if (r0 === null) {
                    r0 = parse_if();
                    if (r0 === null) {
                      r0 = parse_for();
                      if (r0 === null) {
                        r0 = parse_mixinCall();
                        if (r0 === null) {
                          r0 = parse_keyframes();
                          if (r0 === null) {
                            r0 = parse_fontFace();
                            if (r0 === null) {
                              r0 = parse_charset();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_ruleset() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_selectorList();
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_ruleList();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(selectorList, ruleList) {
        		return new N('ruleset', [selectorList, ruleList]);
        	})(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_selectorList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_selector();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse__();
          if (r8 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r9 = ",";
              pos++;
            } else {
              r9 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r9 !== null) {
              r10 = parse__();
              if (r10 !== null) {
                r11 = parse_selector();
                if (r11 !== null) {
                  r5 = [r8, r9, r10, r11];
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(s) {return s;})(r11);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse__();
            if (r8 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r9 = ",";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r9 !== null) {
                r10 = parse__();
                if (r10 !== null) {
                  r11 = parse_selector();
                  if (r11 !== null) {
                    r5 = [r8, r9, r10, r11];
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(s) {return s;})(r11);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return new N('selectorList', rest);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_selector() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        r5 = pos;
        r6 = parse_nonSpaceCombinator();
        if (r6 !== null) {
          r7 = parse__();
          if (r7 !== null) {
            r3 = [r6, r7];
          } else {
            r3 = null;
            pos = r5;
          }
        } else {
          r3 = null;
          pos = r5;
        }
        if (r3 !== null) {
          reportedPos = r4;
          r3 = (function(c) {return c;})(r6);
        }
        if (r3 === null) {
          pos = r4;
        }
        r3 = r3 !== null ? r3 : "";
        if (r3 !== null) {
          r4 = parse_compoundSelector();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(combinator, compoundSelector) {
        		if (combinator) compoundSelector.unshift(combinator);
        		return new N('selector', compoundSelector);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_compoundSelector() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_simpleSelector();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse_combinator();
          if (r8 !== null) {
            r9 = parse_simpleSelector();
            if (r9 !== null) {
              r5 = [r8, r9];
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(c, s) {s.unshift(c); return s;})(r8, r9);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse_combinator();
            if (r8 !== null) {
              r9 = parse_simpleSelector();
              if (r9 !== null) {
                r5 = [r8, r9];
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(c, s) {s.unshift(c); return s;})(r8, r9);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		if (rest.length) rest = first.concat(_.flatten(rest));
        		else rest = first;
        
        		return rest;
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_combinator() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse__();
        if (r3 !== null) {
          r4 = parse_nonSpaceCombinator();
          if (r4 !== null) {
            r5 = parse__();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(nonSpaceCombinator) {
        		return nonSpaceCombinator;
        	})(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_spaceCombinator();
        }
        return r0;
      }
      
      function parse_nonSpaceCombinator() {
        var r0, r1;
        
        r1 = pos;
        if (/^[>+~]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[>+~]");
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('combinator', [value]);
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_spaceCombinator() {
        var r0, r1;
        
        r1 = pos;
        r0 = parse_s();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() {
        		return new N('combinator', [' ']);
        	})();
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_simpleSelector() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_baseSelector();
        if (r3 === null) {
          r3 = parse_suffixSelector();
        }
        if (r3 !== null) {
          r4 = [];
          r5 = parse_suffixSelector();
          while (r5 !== null) {
            r4.push(r5);
            r5 = parse_suffixSelector();
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return rest;
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_baseSelector() {
        var r0;
        
        r0 = parse_selectorInterpolation();
        if (r0 === null) {
          r0 = parse_typeSelector();
          if (r0 === null) {
            r0 = parse_universalSelector();
            if (r0 === null) {
              r0 = parse_ampersandSelector();
            }
          }
        }
        return r0;
      }
      
      function parse_suffixSelector() {
        var r0;
        
        r0 = parse_hashSelector();
        if (r0 === null) {
          r0 = parse_classSelector();
          if (r0 === null) {
            r0 = parse_attributeSelector();
            if (r0 === null) {
              r0 = parse_negationSelector();
              if (r0 === null) {
                r0 = parse_pseudoSelector();
              }
            }
          }
        }
        return r0;
      }
      
      function parse_selectorInterpolation() {
        var r0, r1;
        
        r1 = pos;
        r0 = parse_variable();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('selectorInterpolation', [value]);
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_typeSelector() {
        var r0, r1;
        
        r1 = pos;
        r0 = parse_identifier();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('typeSelector', [value]);
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_universalSelector() {
        var r0, r1;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 42) {
          r0 = "*";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() {
        		return new N('universalSelector');
        	})();
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_ampersandSelector() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 38) {
          r3 = "&";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"&\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_identifier();
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('ampersandSelector', [value || null]);
        	})(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_hashSelector() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 35) {
          r3 = "#";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_identifier();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('hashSelector', [value]);
        	})(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_classSelector() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 46) {
          r3 = ".";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_identifier();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('classSelector', [value]);
        	})(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_attributeSelector() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 91) {
          r3 = "[";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_identifier();
            if (r5 !== null) {
              r7 = pos;
              r8 = pos;
              r9 = parse__();
              if (r9 !== null) {
                if (input.substr(pos, 2) === "^=") {
                  r10 = "^=";
                  pos += 2;
                } else {
                  r10 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"^=\"");
                  }
                }
                if (r10 === null) {
                  if (input.substr(pos, 2) === "$=") {
                    r10 = "$=";
                    pos += 2;
                  } else {
                    r10 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"$=\"");
                    }
                  }
                  if (r10 === null) {
                    if (input.substr(pos, 2) === "*=") {
                      r10 = "*=";
                      pos += 2;
                    } else {
                      r10 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"*=\"");
                      }
                    }
                    if (r10 === null) {
                      if (input.substr(pos, 2) === "~=") {
                        r10 = "~=";
                        pos += 2;
                      } else {
                        r10 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"~=\"");
                        }
                      }
                      if (r10 === null) {
                        if (input.substr(pos, 2) === "|=") {
                          r10 = "|=";
                          pos += 2;
                        } else {
                          r10 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"|=\"");
                          }
                        }
                        if (r10 === null) {
                          if (input.charCodeAt(pos) === 61) {
                            r10 = "=";
                            pos++;
                          } else {
                            r10 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"=\"");
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (r10 !== null) {
                  r11 = parse__();
                  if (r11 !== null) {
                    r12 = parse_list();
                    if (r12 !== null) {
                      r6 = [r9, r10, r11, r12];
                    } else {
                      r6 = null;
                      pos = r8;
                    }
                  } else {
                    r6 = null;
                    pos = r8;
                  }
                } else {
                  r6 = null;
                  pos = r8;
                }
              } else {
                r6 = null;
                pos = r8;
              }
              if (r6 !== null) {
                reportedPos = r7;
                r6 = (function(o, l) {return [o, l];})(r10, r12);
              }
              if (r6 === null) {
                pos = r7;
              }
              r6 = r6 !== null ? r6 : "";
              if (r6 !== null) {
                r7 = parse__();
                if (r7 !== null) {
                  if (input.charCodeAt(pos) === 93) {
                    r8 = "]";
                    pos++;
                  } else {
                    r8 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(name, rest) {
        		if (rest) rest.unshift(name);
        		else rest = [name];
        		return new N('attributeSelector', rest);
        	})(r5, r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_negationSelector() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 4).toLowerCase() === ":not") {
          r3 = input.substr(pos, 4);
          pos += 4;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\":not\"");
          }
        }
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 40) {
            r4 = "(";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (r4 !== null) {
            r5 = parse__();
            if (r5 !== null) {
              r6 = parse_negationArgument();
              if (r6 !== null) {
                r7 = parse__();
                if (r7 !== null) {
                  if (input.charCodeAt(pos) === 41) {
                    r8 = ")";
                    pos++;
                  } else {
                    r8 = null;
                    if (reportFailures === 0) {
                      matchFailed("\")\"");
                    }
                  }
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(argument) {
        		return new N('negationSelector', [argument]);
        	})(r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_negationArgument() {
        var r0;
        
        r0 = parse_classSelector();
        if (r0 === null) {
          r0 = parse_typeSelector();
          if (r0 === null) {
            r0 = parse_attributeSelector();
            if (r0 === null) {
              r0 = parse_pseudoSelector();
              if (r0 === null) {
                r0 = parse_hashSelector();
                if (r0 === null) {
                  r0 = parse_universalSelector();
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_pseudoSelector() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 58) {
          r3 = ":";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 58) {
            r4 = ":";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r5 = parse_pseudoFunction();
            if (r5 === null) {
              r5 = parse_identifier();
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(doubled, value) {
        		return new N('pseudoSelector', [value], {doubled: !!doubled});
        	})(r4, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_pseudoFunction() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_rawIdentifier();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 40) {
            r4 = "(";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (r4 !== null) {
            r5 = parse__();
            if (r5 !== null) {
              r6 = parse_pseudoArgument();
              if (r6 !== null) {
                r7 = parse__();
                if (r7 !== null) {
                  if (input.charCodeAt(pos) === 41) {
                    r8 = ")";
                    pos++;
                  } else {
                    r8 = null;
                    if (reportFailures === 0) {
                      matchFailed("\")\"");
                    }
                  }
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(name, argument) {
        		return new N('function', [name, argument]);
        	})(r3, r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_pseudoArgument() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_pseudoElement();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse__();
          if (r8 !== null) {
            r9 = parse_pseudoElement();
            if (r9 !== null) {
              r5 = [r8, r9];
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(a) {return a;})(r9);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse__();
            if (r8 !== null) {
              r9 = parse_pseudoElement();
              if (r9 !== null) {
                r5 = [r8, r9];
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(a) {return a;})(r9);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return new N('pseudoArgument', rest);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_pseudoElement() {
        var r0;
        
        if (/^[\-+]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\-+]");
          }
        }
        if (r0 === null) {
          r0 = parse_dimension();
          if (r0 === null) {
            r0 = parse_number();
            if (r0 === null) {
              r0 = parse_string();
              if (r0 === null) {
                r0 = parse_identifier();
              }
            }
          }
        }
        return r0;
      }
      
      function parse_ruleList() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 123) {
          r3 = "{";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_rules();
            r5 = r5 !== null ? r5 : "";
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 125) {
                  r7 = "}";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}\"");
                  }
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(rules) {
        		return new N('ruleList', rules || []);
        	})(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_rules() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_rule();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse__();
          if (r8 !== null) {
            r9 = parse_rule();
            if (r9 !== null) {
              r5 = [r8, r9];
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(r) {return r})(r9);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse__();
            if (r8 !== null) {
              r9 = parse_rule();
              if (r9 !== null) {
                r5 = [r8, r9];
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(r) {return r})(r9);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return rest;
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_rule() {
        var r0;
        
        r0 = parse_ruleset();
        if (r0 === null) {
          r0 = parse_property();
          if (r0 === null) {
            r0 = parse_assignment();
            if (r0 === null) {
              r0 = parse_extend();
              if (r0 === null) {
                r0 = parse_media();
                if (r0 === null) {
                  r0 = parse_void();
                  if (r0 === null) {
                    r0 = parse_block();
                    if (r0 === null) {
                      r0 = parse_import();
                      if (r0 === null) {
                        r0 = parse_if();
                        if (r0 === null) {
                          r0 = parse_for();
                          if (r0 === null) {
                            r0 = parse_mixinCall();
                            if (r0 === null) {
                              r0 = parse_keyframes();
                              if (r0 === null) {
                                r0 = parse_fontFace();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_property() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 42) {
          r3 = "*";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        r3 = r3 !== null ? r3 : "";
        if (r3 !== null) {
          r4 = parse_identifier();
          if (r4 !== null) {
            r5 = parse__();
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 58) {
                r6 = ":";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (r6 !== null) {
                r7 = parse__();
                if (r7 !== null) {
                  r8 = parse_list();
                  if (r8 !== null) {
                    r9 = parse__();
                    if (r9 !== null) {
                      if (input.substr(pos, 10) === "!important") {
                        r10 = "!important";
                        pos += 10;
                      } else {
                        r10 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"!important\"");
                        }
                      }
                      r10 = r10 !== null ? r10 : "";
                      if (r10 !== null) {
                        r11 = parse__();
                        if (r11 !== null) {
                          r12 = parse_semicolon();
                          if (r12 !== null) {
                            r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12];
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(star, name, value, priority) {
        		if (star) {
        			if (name.type === 'identifier')
        				name.children.unshift(star);
        			else
        				name = new N('identifier', [star, name]);
        		}
        		return new N('property', [name, value, priority || null]);
        	})(r3, r4, r8, r10);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_semicolon() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 125) {
          r0 = "}";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"}\"");
          }
        }
        reportFailures--;
        if (r0 !== null) {
          r0 = "";
          pos = r1;
        } else {
          r0 = null;
        }
        if (r0 === null) {
          r1 = pos;
          if (input.charCodeAt(pos) === 59) {
            r2 = ";";
            pos++;
          } else {
            r2 = null;
            if (reportFailures === 0) {
              matchFailed("\";\"");
            }
          }
          if (r2 !== null) {
            r3 = [];
            r5 = pos;
            r6 = parse__();
            if (r6 !== null) {
              if (input.charCodeAt(pos) === 59) {
                r7 = ";";
                pos++;
              } else {
                r7 = null;
                if (reportFailures === 0) {
                  matchFailed("\";\"");
                }
              }
              if (r7 !== null) {
                r4 = [r6, r7];
              } else {
                r4 = null;
                pos = r5;
              }
            } else {
              r4 = null;
              pos = r5;
            }
            while (r4 !== null) {
              r3.push(r4);
              r5 = pos;
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 59) {
                  r7 = ";";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\";\"");
                  }
                }
                if (r7 !== null) {
                  r4 = [r6, r7];
                } else {
                  r4 = null;
                  pos = r5;
                }
              } else {
                r4 = null;
                pos = r5;
              }
            }
            if (r3 !== null) {
              r0 = [r2, r3];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_list() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_logicalOrExpression();
        if (r3 !== null) {
          r6 = pos;
          r7 = parse_separator();
          if (r7 !== null) {
            r8 = parse_logicalOrExpression();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          if (r5 !== null) {
            r4 = [];
            while (r5 !== null) {
              r4.push(r5);
              r6 = pos;
              r7 = parse_separator();
              if (r7 !== null) {
                r8 = parse_logicalOrExpression();
                if (r8 !== null) {
                  r5 = [r7, r8];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            }
          } else {
            r4 = null;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest = _.flatten(rest);
        		rest.unshift(first);
        		return new N('list', rest);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_logicalOrExpression();
        }
        return r0;
      }
      
      function parse_separator() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse__();
        if (r3 !== null) {
          r4 = parse_commaSeparator();
          if (r4 !== null) {
            r5 = parse__();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(commaSeparator) {
        		return commaSeparator;
        	})(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_nonCommaSeparator();
        }
        return r0;
      }
      
      function parse_commaSeparator() {
        var r0, r1;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 44) {
          r0 = ",";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\",\"");
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('separator', [value]);
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_nonCommaSeparator() {
        var r0, r1, r2;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 47) {
          r0 = "/";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        if (r0 === null) {
          r2 = pos;
          r0 = parse_s();
          if (r0 !== null) {
            reportedPos = r2;
            r0 = (function() {return ' '})();
          }
          if (r0 === null) {
            pos = r2;
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('separator', [value]);
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_nonCommaList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_logicalOrExpression();
        if (r3 !== null) {
          r6 = pos;
          r7 = parse_nonCommaSeparator();
          if (r7 !== null) {
            r8 = parse_logicalOrExpression();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          if (r5 !== null) {
            r4 = [];
            while (r5 !== null) {
              r4.push(r5);
              r6 = pos;
              r7 = parse_nonCommaSeparator();
              if (r7 !== null) {
                r8 = parse_logicalOrExpression();
                if (r8 !== null) {
                  r5 = [r7, r8];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            }
          } else {
            r4 = null;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest = _.flatten(rest);
        		rest.unshift(first);
        		return new N('list', rest);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_logicalOrExpression();
        }
        return r0;
      }
      
      function parse_logicalOrExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_logicalAndExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse__();
          if (r8 !== null) {
            if (input.substr(pos, 2).toLowerCase() === "or") {
              r9 = input.substr(pos, 2);
              pos += 2;
            } else {
              r9 = null;
              if (reportFailures === 0) {
                matchFailed("\"or\"");
              }
            }
            if (r9 !== null) {
              r10 = parse__();
              if (r10 !== null) {
                r11 = parse_logicalAndExpression();
                if (r11 !== null) {
                  r5 = [r8, r9, r10, r11];
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(e) {return e;})(r11);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse__();
            if (r8 !== null) {
              if (input.substr(pos, 2).toLowerCase() === "or") {
                r9 = input.substr(pos, 2);
                pos += 2;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\"or\"");
                }
              }
              if (r9 !== null) {
                r10 = parse__();
                if (r10 !== null) {
                  r11 = parse_logicalAndExpression();
                  if (r11 !== null) {
                    r5 = [r8, r9, r10, r11];
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(e) {return e;})(r11);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		var node = first;
        		rest.forEach(function(operand) {
        			node = new N('logicalExpression', [node, 'or', operand]);
        		});
        		return node;
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_logicalAndExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_equalityExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse__();
          if (r8 !== null) {
            if (input.substr(pos, 3).toLowerCase() === "and") {
              r9 = input.substr(pos, 3);
              pos += 3;
            } else {
              r9 = null;
              if (reportFailures === 0) {
                matchFailed("\"and\"");
              }
            }
            if (r9 !== null) {
              r10 = parse__();
              if (r10 !== null) {
                r11 = parse_equalityExpression();
                if (r11 !== null) {
                  r5 = [r8, r9, r10, r11];
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(e) {return e;})(r11);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse__();
            if (r8 !== null) {
              if (input.substr(pos, 3).toLowerCase() === "and") {
                r9 = input.substr(pos, 3);
                pos += 3;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\"and\"");
                }
              }
              if (r9 !== null) {
                r10 = parse__();
                if (r10 !== null) {
                  r11 = parse_equalityExpression();
                  if (r11 !== null) {
                    r5 = [r8, r9, r10, r11];
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(e) {return e;})(r11);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		var node = first;
        		rest.forEach(function(operand) {
        			node = new N('logicalExpression', [node, 'and', operand]);
        		});
        		return node;
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_equalityExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_relationalExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r8 = pos;
          r9 = pos;
          r10 = parse__();
          if (r10 !== null) {
            if (input.substr(pos, 4).toLowerCase() === "isnt") {
              r11 = input.substr(pos, 4);
              pos += 4;
            } else {
              r11 = null;
              if (reportFailures === 0) {
                matchFailed("\"isnt\"");
              }
            }
            if (r11 === null) {
              if (input.substr(pos, 2).toLowerCase() === "is") {
                r11 = input.substr(pos, 2);
                pos += 2;
              } else {
                r11 = null;
                if (reportFailures === 0) {
                  matchFailed("\"is\"");
                }
              }
            }
            if (r11 !== null) {
              r12 = parse__();
              if (r12 !== null) {
                r7 = [r10, r11, r12];
              } else {
                r7 = null;
                pos = r9;
              }
            } else {
              r7 = null;
              pos = r9;
            }
          } else {
            r7 = null;
            pos = r9;
          }
          if (r7 !== null) {
            reportedPos = r8;
            r7 = (function(o) {return o;})(r11);
          }
          if (r7 === null) {
            pos = r8;
          }
          if (r7 !== null) {
            r8 = parse_relationalExpression();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r8 = pos;
            r9 = pos;
            r10 = parse__();
            if (r10 !== null) {
              if (input.substr(pos, 4).toLowerCase() === "isnt") {
                r11 = input.substr(pos, 4);
                pos += 4;
              } else {
                r11 = null;
                if (reportFailures === 0) {
                  matchFailed("\"isnt\"");
                }
              }
              if (r11 === null) {
                if (input.substr(pos, 2).toLowerCase() === "is") {
                  r11 = input.substr(pos, 2);
                  pos += 2;
                } else {
                  r11 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"is\"");
                  }
                }
              }
              if (r11 !== null) {
                r12 = parse__();
                if (r12 !== null) {
                  r7 = [r10, r11, r12];
                } else {
                  r7 = null;
                  pos = r9;
                }
              } else {
                r7 = null;
                pos = r9;
              }
            } else {
              r7 = null;
              pos = r9;
            }
            if (r7 !== null) {
              reportedPos = r8;
              r7 = (function(o) {return o;})(r11);
            }
            if (r7 === null) {
              pos = r8;
            }
            if (r7 !== null) {
              r8 = parse_relationalExpression();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		var node = first;
        		rest.forEach(function(array) {
        			var operator = array[0];
        			var operand = array[1];
        			node = new N('equalityExpression', [node, operator, operand]);
        		});
        		return node;
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_relationalExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_range();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r8 = pos;
          r9 = pos;
          r10 = parse__();
          if (r10 !== null) {
            r12 = pos;
            r13 = pos;
            if (/^[<>]/.test(input.charAt(pos))) {
              r14 = input.charAt(pos);
              pos++;
            } else {
              r14 = null;
              if (reportFailures === 0) {
                matchFailed("[<>]");
              }
            }
            if (r14 !== null) {
              if (input.charCodeAt(pos) === 61) {
                r15 = "=";
                pos++;
              } else {
                r15 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              r15 = r15 !== null ? r15 : "";
              if (r15 !== null) {
                r11 = [r14, r15];
              } else {
                r11 = null;
                pos = r13;
              }
            } else {
              r11 = null;
              pos = r13;
            }
            if (r11 !== null) {
              r11 = input.substring(pos, r12);
            }
            if (r11 !== null) {
              r12 = parse__();
              if (r12 !== null) {
                r7 = [r10, r11, r12];
              } else {
                r7 = null;
                pos = r9;
              }
            } else {
              r7 = null;
              pos = r9;
            }
          } else {
            r7 = null;
            pos = r9;
          }
          if (r7 !== null) {
            reportedPos = r8;
            r7 = (function(o) {return o;})(r11);
          }
          if (r7 === null) {
            pos = r8;
          }
          if (r7 !== null) {
            r8 = parse_range();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r8 = pos;
            r9 = pos;
            r10 = parse__();
            if (r10 !== null) {
              r12 = pos;
              r13 = pos;
              if (/^[<>]/.test(input.charAt(pos))) {
                r14 = input.charAt(pos);
                pos++;
              } else {
                r14 = null;
                if (reportFailures === 0) {
                  matchFailed("[<>]");
                }
              }
              if (r14 !== null) {
                if (input.charCodeAt(pos) === 61) {
                  r15 = "=";
                  pos++;
                } else {
                  r15 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                r15 = r15 !== null ? r15 : "";
                if (r15 !== null) {
                  r11 = [r14, r15];
                } else {
                  r11 = null;
                  pos = r13;
                }
              } else {
                r11 = null;
                pos = r13;
              }
              if (r11 !== null) {
                r11 = input.substring(pos, r12);
              }
              if (r11 !== null) {
                r12 = parse__();
                if (r12 !== null) {
                  r7 = [r10, r11, r12];
                } else {
                  r7 = null;
                  pos = r9;
                }
              } else {
                r7 = null;
                pos = r9;
              }
            } else {
              r7 = null;
              pos = r9;
            }
            if (r7 !== null) {
              reportedPos = r8;
              r7 = (function(o) {return o;})(r11);
            }
            if (r7 === null) {
              pos = r8;
            }
            if (r7 !== null) {
              r8 = parse_range();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		var node = first;
        		rest.forEach(function(array) {
        			var operator = array[0];
        			var operand = array[1];
        			node = new N('relationalExpression', [node, operator, operand]);
        		});
        		return node;
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_range() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_additiveExpression();
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r6 = pos;
            r7 = pos;
            if (input.substr(pos, 2) === "..") {
              r8 = "..";
              pos += 2;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\"..\"");
              }
            }
            if (r8 !== null) {
              if (input.charCodeAt(pos) === 46) {
                r9 = ".";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              r9 = r9 !== null ? r9 : "";
              if (r9 !== null) {
                r5 = [r8, r9];
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              r5 = input.substring(pos, r6);
            }
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r7 = parse_additiveExpression();
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(from, operator, to) {
        		return new N('range', [from, operator, to]);
        	})(r3, r5, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_additiveExpression();
        }
        return r0;
      }
      
      function parse_additiveExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_multiplicativeExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r8 = pos;
          r9 = pos;
          r10 = parse__();
          if (r10 !== null) {
            if (/^[\-+]/.test(input.charAt(pos))) {
              r11 = input.charAt(pos);
              pos++;
            } else {
              r11 = null;
              if (reportFailures === 0) {
                matchFailed("[\\-+]");
              }
            }
            if (r11 !== null) {
              r12 = parse_s();
              if (r12 !== null) {
                r7 = [r10, r11, r12];
              } else {
                r7 = null;
                pos = r9;
              }
            } else {
              r7 = null;
              pos = r9;
            }
          } else {
            r7 = null;
            pos = r9;
          }
          if (r7 !== null) {
            reportedPos = r8;
            r7 = (function(c) {return c;})(r11);
          }
          if (r7 === null) {
            pos = r8;
          }
          if (r7 === null) {
            if (/^[\-+]/.test(input.charAt(pos))) {
              r7 = input.charAt(pos);
              pos++;
            } else {
              r7 = null;
              if (reportFailures === 0) {
                matchFailed("[\\-+]");
              }
            }
          }
          if (r7 !== null) {
            r8 = parse_multiplicativeExpression();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r8 = pos;
            r9 = pos;
            r10 = parse__();
            if (r10 !== null) {
              if (/^[\-+]/.test(input.charAt(pos))) {
                r11 = input.charAt(pos);
                pos++;
              } else {
                r11 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\-+]");
                }
              }
              if (r11 !== null) {
                r12 = parse_s();
                if (r12 !== null) {
                  r7 = [r10, r11, r12];
                } else {
                  r7 = null;
                  pos = r9;
                }
              } else {
                r7 = null;
                pos = r9;
              }
            } else {
              r7 = null;
              pos = r9;
            }
            if (r7 !== null) {
              reportedPos = r8;
              r7 = (function(c) {return c;})(r11);
            }
            if (r7 === null) {
              pos = r8;
            }
            if (r7 === null) {
              if (/^[\-+]/.test(input.charAt(pos))) {
                r7 = input.charAt(pos);
                pos++;
              } else {
                r7 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\-+]");
                }
              }
            }
            if (r7 !== null) {
              r8 = parse_multiplicativeExpression();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		var node = first;
        		rest.forEach(function(array) {
        			var operator = array[0];
        			var operand = array[1];
        			node = new N('arithmeticExpression', [node, operator, operand]);
        		})
        		return node;
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_multiplicativeExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_unaryExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r8 = pos;
          r9 = pos;
          r10 = parse__();
          if (r10 !== null) {
            if (input.charCodeAt(pos) === 47) {
              r11 = "/";
              pos++;
            } else {
              r11 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (r11 !== null) {
              r12 = parse_s();
              if (r12 !== null) {
                r7 = [r10, r11, r12];
              } else {
                r7 = null;
                pos = r9;
              }
            } else {
              r7 = null;
              pos = r9;
            }
          } else {
            r7 = null;
            pos = r9;
          }
          if (r7 !== null) {
            reportedPos = r8;
            r7 = (function(c) {return c;})(r11);
          }
          if (r7 === null) {
            pos = r8;
          }
          if (r7 === null) {
            r8 = pos;
            r9 = pos;
            r10 = parse_s();
            if (r10 !== null) {
              if (input.charCodeAt(pos) === 47) {
                r11 = "/";
                pos++;
              } else {
                r11 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }
              if (r11 !== null) {
                r12 = parse__();
                if (r12 !== null) {
                  r7 = [r10, r11, r12];
                } else {
                  r7 = null;
                  pos = r9;
                }
              } else {
                r7 = null;
                pos = r9;
              }
            } else {
              r7 = null;
              pos = r9;
            }
            if (r7 !== null) {
              reportedPos = r8;
              r7 = (function(c) {return c;})(r11);
            }
            if (r7 === null) {
              pos = r8;
            }
            if (r7 === null) {
              r8 = pos;
              r9 = pos;
              r10 = parse__();
              if (r10 !== null) {
                if (input.charCodeAt(pos) === 42) {
                  r11 = "*";
                  pos++;
                } else {
                  r11 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*\"");
                  }
                }
                if (r11 !== null) {
                  r12 = parse__();
                  if (r12 !== null) {
                    r7 = [r10, r11, r12];
                  } else {
                    r7 = null;
                    pos = r9;
                  }
                } else {
                  r7 = null;
                  pos = r9;
                }
              } else {
                r7 = null;
                pos = r9;
              }
              if (r7 !== null) {
                reportedPos = r8;
                r7 = (function(c) {return c;})(r11);
              }
              if (r7 === null) {
                pos = r8;
              }
            }
          }
          if (r7 !== null) {
            r8 = parse_unaryExpression();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r8 = pos;
            r9 = pos;
            r10 = parse__();
            if (r10 !== null) {
              if (input.charCodeAt(pos) === 47) {
                r11 = "/";
                pos++;
              } else {
                r11 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }
              if (r11 !== null) {
                r12 = parse_s();
                if (r12 !== null) {
                  r7 = [r10, r11, r12];
                } else {
                  r7 = null;
                  pos = r9;
                }
              } else {
                r7 = null;
                pos = r9;
              }
            } else {
              r7 = null;
              pos = r9;
            }
            if (r7 !== null) {
              reportedPos = r8;
              r7 = (function(c) {return c;})(r11);
            }
            if (r7 === null) {
              pos = r8;
            }
            if (r7 === null) {
              r8 = pos;
              r9 = pos;
              r10 = parse_s();
              if (r10 !== null) {
                if (input.charCodeAt(pos) === 47) {
                  r11 = "/";
                  pos++;
                } else {
                  r11 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"/\"");
                  }
                }
                if (r11 !== null) {
                  r12 = parse__();
                  if (r12 !== null) {
                    r7 = [r10, r11, r12];
                  } else {
                    r7 = null;
                    pos = r9;
                  }
                } else {
                  r7 = null;
                  pos = r9;
                }
              } else {
                r7 = null;
                pos = r9;
              }
              if (r7 !== null) {
                reportedPos = r8;
                r7 = (function(c) {return c;})(r11);
              }
              if (r7 === null) {
                pos = r8;
              }
              if (r7 === null) {
                r8 = pos;
                r9 = pos;
                r10 = parse__();
                if (r10 !== null) {
                  if (input.charCodeAt(pos) === 42) {
                    r11 = "*";
                    pos++;
                  } else {
                    r11 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"*\"");
                    }
                  }
                  if (r11 !== null) {
                    r12 = parse__();
                    if (r12 !== null) {
                      r7 = [r10, r11, r12];
                    } else {
                      r7 = null;
                      pos = r9;
                    }
                  } else {
                    r7 = null;
                    pos = r9;
                  }
                } else {
                  r7 = null;
                  pos = r9;
                }
                if (r7 !== null) {
                  reportedPos = r8;
                  r7 = (function(c) {return c;})(r11);
                }
                if (r7 === null) {
                  pos = r8;
                }
              }
            }
            if (r7 !== null) {
              r8 = parse_unaryExpression();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		var node = first;
        		rest.forEach(function(array) {
        			var operator = array[0];
        			var operand = array[1];
        			node = new N('arithmeticExpression', [node, operator, operand]);
        		});
        		return node;
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_unaryExpression();
        }
        return r0;
      }
      
      function parse_unaryExpression() {
        var r0, r1, r2, r3, r4;
        
        r0 = parse_primary();
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (/^[\-+]/.test(input.charAt(pos))) {
            r3 = input.charAt(pos);
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("[\\-+]");
            }
          }
          if (r3 !== null) {
            r4 = parse_unaryExpression();
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(operator, operand) {
          		return new N('unaryExpression', [operator, operand]);
          	})(r3, r4);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_primary() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 40) {
          r3 = "(";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_list();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  r7 = ")";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(list) {
        		return list;
        	})(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_member();
          if (r0 === null) {
            r0 = parse_memberRange();
            if (r0 === null) {
              r0 = parse_variable();
              if (r0 === null) {
                r0 = parse_percentage();
                if (r0 === null) {
                  r0 = parse_dimension();
                  if (r0 === null) {
                    r0 = parse_number();
                    if (r0 === null) {
                      r0 = parse_color();
                      if (r0 === null) {
                        r0 = parse_url();
                        if (r0 === null) {
                          r0 = parse_function();
                          if (r0 === null) {
                            r0 = parse_boolean();
                            if (r0 === null) {
                              r0 = parse_null();
                              if (r0 === null) {
                                r0 = parse_identifier();
                                if (r0 === null) {
                                  r0 = parse_string();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_identifier() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = parse_rawIdentifier();
        if (r2 === null) {
          r3 = pos;
          r4 = pos;
          if (input.charCodeAt(pos) === 45) {
            r5 = "-";
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          r5 = r5 !== null ? r5 : "";
          if (r5 !== null) {
            r6 = parse_variable();
            if (r6 === null) {
              r6 = parse_interpolation();
            }
            if (r6 !== null) {
              r2 = [r5, r6];
            } else {
              r2 = null;
              pos = r4;
            }
          } else {
            r2 = null;
            pos = r4;
          }
          if (r2 !== null) {
            reportedPos = r3;
            r2 = (function(d, v) {return d ? [d,v] : v;})(r5, r6);
          }
          if (r2 === null) {
            pos = r3;
          }
        }
        if (r2 !== null) {
          r0 = [];
          while (r2 !== null) {
            r0.push(r2);
            r2 = parse_rawIdentifier();
            if (r2 === null) {
              r3 = pos;
              r4 = pos;
              if (input.charCodeAt(pos) === 45) {
                r5 = "-";
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              r5 = r5 !== null ? r5 : "";
              if (r5 !== null) {
                r6 = parse_variable();
                if (r6 === null) {
                  r6 = parse_interpolation();
                }
                if (r6 !== null) {
                  r2 = [r5, r6];
                } else {
                  r2 = null;
                  pos = r4;
                }
              } else {
                r2 = null;
                pos = r4;
              }
              if (r2 !== null) {
                reportedPos = r3;
                r2 = (function(d, v) {return d ? [d,v] : v;})(r5, r6);
              }
              if (r2 === null) {
                pos = r3;
              }
            }
          }
        } else {
          r0 = null;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(values) {
        		values = _.flatten(values);
        		if (values.length === 1 && typeof values[0] !== 'string')
        			return values[0];
        
        		return new N('identifier', values);
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_rawIdentifier() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        r3 = pos;
        if (input.charCodeAt(pos) === 45) {
          r4 = "-";
          pos++;
        } else {
          r4 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        r4 = r4 !== null ? r4 : "";
        if (r4 !== null) {
          if (/^[_a-z]/i.test(input.charAt(pos))) {
            r5 = input.charAt(pos);
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("[_a-z]i");
            }
          }
          if (r5 !== null) {
            r6 = [];
            if (/^[\-_a-z0-9]/i.test(input.charAt(pos))) {
              r7 = input.charAt(pos);
              pos++;
            } else {
              r7 = null;
              if (reportFailures === 0) {
                matchFailed("[\\-_a-z0-9]i");
              }
            }
            while (r7 !== null) {
              r6.push(r7);
              if (/^[\-_a-z0-9]/i.test(input.charAt(pos))) {
                r7 = input.charAt(pos);
                pos++;
              } else {
                r7 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\-_a-z0-9]i");
                }
              }
            }
            if (r6 !== null) {
              r0 = [r4, r5, r6];
            } else {
              r0 = null;
              pos = r3;
            }
          } else {
            r0 = null;
            pos = r3;
          }
        } else {
          r0 = null;
          pos = r3;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r2);
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return value;
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_interpolation() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 123) {
          r3 = "{";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_variable();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 125) {
                  r7 = "}";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}\"");
                  }
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(variable) {
        		return variable;
        	})(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_member() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_variable();
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 91) {
              r5 = "[";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r7 = parse_rawNumber();
                if (r7 !== null) {
                  r8 = parse__();
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 93) {
                      r9 = "]";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (r9 !== null) {
                      r0 = [r3, r4, r5, r6, r7, r8, r9];
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(variable, value) {
            return new N('member', [variable, value]);
          })(r3, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_memberRange() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_variable();
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 91) {
              r5 = "[";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r7 = parse_range();
                if (r7 !== null) {
                  r8 = parse__();
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 93) {
                      r9 = "]";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (r9 !== null) {
                      r0 = [r3, r4, r5, r6, r7, r8, r9];
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(variable, range) {
             return new N('memberRange', [variable, range]);
          })(r3, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_variable() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 36) {
          r3 = "$";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"$\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_rawIdentifier();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('variable', [value]);
        	})(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_string() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 39) {
          r3 = "'";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          r4 = [];
          if (/^[^\n\r\f\\']/.test(input.charAt(pos))) {
            r6 = input.charAt(pos);
            pos++;
          } else {
            r6 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\n\\r\\f\\\\']");
            }
          }
          if (r6 === null) {
            r7 = pos;
            if (input.charCodeAt(pos) === 92) {
              r8 = "\\";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (r8 !== null) {
              if (input.length > pos) {
                r9 = input.charAt(pos);
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (r9 !== null) {
                r6 = [r8, r9];
              } else {
                r6 = null;
                pos = r7;
              }
            } else {
              r6 = null;
              pos = r7;
            }
          }
          while (r6 !== null) {
            r4.push(r6);
            if (/^[^\n\r\f\\']/.test(input.charAt(pos))) {
              r6 = input.charAt(pos);
              pos++;
            } else {
              r6 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n\\r\\f\\\\']");
              }
            }
            if (r6 === null) {
              r7 = pos;
              if (input.charCodeAt(pos) === 92) {
                r8 = "\\";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (r8 !== null) {
                if (input.length > pos) {
                  r9 = input.charAt(pos);
                  pos++;
                } else {
                  r9 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                if (r9 !== null) {
                  r6 = [r8, r9];
                } else {
                  r6 = null;
                  pos = r7;
                }
              } else {
                r6 = null;
                pos = r7;
              }
            }
          }
          if (r4 !== null) {
            r4 = input.substring(pos, r5);
          }
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 39) {
              r5 = "'";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('string', [value], {quote: "'"});
        	})(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 34) {
            r3 = "\"";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            r6 = pos;
            if (/^[^\n\r\f\\"{$]/.test(input.charAt(pos))) {
              r7 = input.charAt(pos);
              pos++;
            } else {
              r7 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n\\r\\f\\\\\"{$]");
              }
            }
            if (r7 === null) {
              r8 = pos;
              if (input.charCodeAt(pos) === 92) {
                r9 = "\\";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (r9 !== null) {
                if (input.length > pos) {
                  r10 = input.charAt(pos);
                  pos++;
                } else {
                  r10 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                if (r10 !== null) {
                  r7 = [r9, r10];
                } else {
                  r7 = null;
                  pos = r8;
                }
              } else {
                r7 = null;
                pos = r8;
              }
            }
            if (r7 !== null) {
              r5 = [];
              while (r7 !== null) {
                r5.push(r7);
                if (/^[^\n\r\f\\"{$]/.test(input.charAt(pos))) {
                  r7 = input.charAt(pos);
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\n\\r\\f\\\\\"{$]");
                  }
                }
                if (r7 === null) {
                  r8 = pos;
                  if (input.charCodeAt(pos) === 92) {
                    r9 = "\\";
                    pos++;
                  } else {
                    r9 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\\\\"");
                    }
                  }
                  if (r9 !== null) {
                    if (input.length > pos) {
                      r10 = input.charAt(pos);
                      pos++;
                    } else {
                      r10 = null;
                      if (reportFailures === 0) {
                        matchFailed("any character");
                      }
                    }
                    if (r10 !== null) {
                      r7 = [r9, r10];
                    } else {
                      r7 = null;
                      pos = r8;
                    }
                  } else {
                    r7 = null;
                    pos = r8;
                  }
                }
              }
            } else {
              r5 = null;
            }
            if (r5 !== null) {
              r5 = input.substring(pos, r6);
            }
            if (r5 === null) {
              r5 = parse_variable();
              if (r5 === null) {
                r5 = parse_interpolation();
                if (r5 === null) {
                  if (input.charCodeAt(pos) === 123) {
                    r5 = "{";
                    pos++;
                  } else {
                    r5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"{\"");
                    }
                  }
                }
              }
            }
            while (r5 !== null) {
              r4.push(r5);
              r6 = pos;
              if (/^[^\n\r\f\\"{$]/.test(input.charAt(pos))) {
                r7 = input.charAt(pos);
                pos++;
              } else {
                r7 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\n\\r\\f\\\\\"{$]");
                }
              }
              if (r7 === null) {
                r8 = pos;
                if (input.charCodeAt(pos) === 92) {
                  r9 = "\\";
                  pos++;
                } else {
                  r9 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\\\"");
                  }
                }
                if (r9 !== null) {
                  if (input.length > pos) {
                    r10 = input.charAt(pos);
                    pos++;
                  } else {
                    r10 = null;
                    if (reportFailures === 0) {
                      matchFailed("any character");
                    }
                  }
                  if (r10 !== null) {
                    r7 = [r9, r10];
                  } else {
                    r7 = null;
                    pos = r8;
                  }
                } else {
                  r7 = null;
                  pos = r8;
                }
              }
              if (r7 !== null) {
                r5 = [];
                while (r7 !== null) {
                  r5.push(r7);
                  if (/^[^\n\r\f\\"{$]/.test(input.charAt(pos))) {
                    r7 = input.charAt(pos);
                    pos++;
                  } else {
                    r7 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^\\n\\r\\f\\\\\"{$]");
                    }
                  }
                  if (r7 === null) {
                    r8 = pos;
                    if (input.charCodeAt(pos) === 92) {
                      r9 = "\\";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"\\\\\"");
                      }
                    }
                    if (r9 !== null) {
                      if (input.length > pos) {
                        r10 = input.charAt(pos);
                        pos++;
                      } else {
                        r10 = null;
                        if (reportFailures === 0) {
                          matchFailed("any character");
                        }
                      }
                      if (r10 !== null) {
                        r7 = [r9, r10];
                      } else {
                        r7 = null;
                        pos = r8;
                      }
                    } else {
                      r7 = null;
                      pos = r8;
                    }
                  }
                }
              } else {
                r5 = null;
              }
              if (r5 !== null) {
                r5 = input.substring(pos, r6);
              }
              if (r5 === null) {
                r5 = parse_variable();
                if (r5 === null) {
                  r5 = parse_interpolation();
                  if (r5 === null) {
                    if (input.charCodeAt(pos) === 123) {
                      r5 = "{";
                      pos++;
                    } else {
                      r5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"{\"");
                      }
                    }
                  }
                }
              }
            }
            if (r4 !== null) {
              if (input.charCodeAt(pos) === 34) {
                r5 = "\"";
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (r5 !== null) {
                r0 = [r3, r4, r5];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(values) {
          		if (!values.length) values.push('');
          		return new N('string', values, {quote: '"'});
          	})(r4);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_percentage() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_rawNumber();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 37) {
            r4 = "%";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"%\"");
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('percentage', [value]);
        	})(r3);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_dimension() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_rawNumber();
        if (r3 !== null) {
          r4 = parse_rawIdentifier();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value, unit) {
        		return new N('dimension', [value, unit]);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_number() {
        var r0, r1;
        
        r1 = pos;
        r0 = parse_rawNumber();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('number', [value]);
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_rawNumber() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        r3 = pos;
        r4 = [];
        if (/^[0-9]/.test(input.charAt(pos))) {
          r5 = input.charAt(pos);
          pos++;
        } else {
          r5 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        while (r5 !== null) {
          r4.push(r5);
          if (/^[0-9]/.test(input.charAt(pos))) {
            r5 = input.charAt(pos);
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
        }
        if (r4 !== null) {
          if (input.charCodeAt(pos) === 46) {
            r5 = ".";
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (r5 !== null) {
            if (/^[0-9]/.test(input.charAt(pos))) {
              r7 = input.charAt(pos);
              pos++;
            } else {
              r7 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (r7 !== null) {
              r6 = [];
              while (r7 !== null) {
                r6.push(r7);
                if (/^[0-9]/.test(input.charAt(pos))) {
                  r7 = input.charAt(pos);
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              r6 = null;
            }
            if (r6 !== null) {
              r0 = [r4, r5, r6];
            } else {
              r0 = null;
              pos = r3;
            }
          } else {
            r0 = null;
            pos = r3;
          }
        } else {
          r0 = null;
          pos = r3;
        }
        if (r0 === null) {
          if (/^[0-9]/.test(input.charAt(pos))) {
            r3 = input.charAt(pos);
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (r3 !== null) {
            r0 = [];
            while (r3 !== null) {
              r0.push(r3);
              if (/^[0-9]/.test(input.charAt(pos))) {
                r3 = input.charAt(pos);
                pos++;
              } else {
                r3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            r0 = null;
          }
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r2);
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return +value
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_color() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 35) {
          r3 = "#";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          if (/^[0-9a-z]/i.test(input.charAt(pos))) {
            r6 = input.charAt(pos);
            pos++;
          } else {
            r6 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9a-z]i");
            }
          }
          if (r6 !== null) {
            r4 = [];
            while (r6 !== null) {
              r4.push(r6);
              if (/^[0-9a-z]/i.test(input.charAt(pos))) {
                r6 = input.charAt(pos);
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9a-z]i");
                }
              }
            }
          } else {
            r4 = null;
          }
          if (r4 !== null) {
            r4 = input.substring(pos, r5);
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(rgb) {
        		if (rgb.length !== 3 && rgb.length !== 6)
        			return
        
        		return new N('color', [rgb]);
        	})(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_function() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_rawIdentifier();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 40) {
            r4 = "(";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (r4 !== null) {
            r5 = parse__();
            if (r5 !== null) {
              r6 = parse_argumentList();
              if (r6 !== null) {
                r7 = parse__();
                if (r7 !== null) {
                  if (input.charCodeAt(pos) === 41) {
                    r8 = ")";
                    pos++;
                  } else {
                    r8 = null;
                    if (reportFailures === 0) {
                      matchFailed("\")\"");
                    }
                  }
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(name, argumentList) {
        		return new N('function', [name, argumentList]);
        	})(r3, r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_argumentList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_nonCommaList();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse__();
          if (r8 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r9 = ",";
              pos++;
            } else {
              r9 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r9 !== null) {
              r10 = parse__();
              if (r10 !== null) {
                r11 = parse_nonCommaList();
                if (r11 !== null) {
                  r5 = [r8, r9, r10, r11];
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(s) {return s;})(r11);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse__();
            if (r8 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r9 = ",";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r9 !== null) {
                r10 = parse__();
                if (r10 !== null) {
                  r11 = parse_nonCommaList();
                  if (r11 !== null) {
                    r5 = [r8, r9, r10, r11];
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(s) {return s;})(r11);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return new N('argumentList', rest);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_boolean() {
        var r0, r1;
        
        r1 = pos;
        if (input.substr(pos, 4).toLowerCase() === "true") {
          r0 = input.substr(pos, 4);
          pos += 4;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() {
        		return new N('boolean', [true]);
        	})();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          if (input.substr(pos, 5).toLowerCase() === "false") {
            r0 = input.substr(pos, 5);
            pos += 5;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"false\"");
            }
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() {
          		return new N('boolean', [false]);
          	})();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_null() {
        var r0, r1;
        
        r1 = pos;
        if (input.substr(pos, 4).toLowerCase() === "null") {
          r0 = input.substr(pos, 4);
          pos += 4;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"null\"");
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() {
        		return new N('null');
        	})();
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_assignment() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_variable();
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r6 = pos;
            r7 = pos;
            if (/^[\-+*\/?]/.test(input.charAt(pos))) {
              r8 = input.charAt(pos);
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("[\\-+*\\/?]");
              }
            }
            r8 = r8 !== null ? r8 : "";
            if (r8 !== null) {
              if (input.charCodeAt(pos) === 61) {
                r9 = "=";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              if (r9 !== null) {
                r5 = [r8, r9];
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              r5 = input.substring(pos, r6);
            }
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r7 = parse_mixin();
                if (r7 === null) {
                  r7 = parse_list();
                }
                if (r7 !== null) {
                  r8 = parse__();
                  if (r8 !== null) {
                    r9 = parse_semicolon();
                    if (r9 !== null) {
                      r0 = [r3, r4, r5, r6, r7, r8, r9];
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(name, operator, value) {
        		return new N('assignment', [name, operator, value]);
        	})(r3, r5, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_media() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 6).toLowerCase() === "@media") {
          r3 = input.substr(pos, 6);
          pos += 6;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@media\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_mediaQueryList();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r7 = parse_ruleList();
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(mediaQueryList, ruleList) {
        		return new N('media', [mediaQueryList, ruleList]);
        	})(r5, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_mediaQueryList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_mediaQuery();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse__();
          if (r8 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r9 = ",";
              pos++;
            } else {
              r9 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r9 !== null) {
              r10 = parse__();
              if (r10 !== null) {
                r11 = parse_mediaQuery();
                if (r11 !== null) {
                  r5 = [r8, r9, r10, r11];
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(q) {return q;})(r11);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse__();
            if (r8 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r9 = ",";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r9 !== null) {
                r10 = parse__();
                if (r10 !== null) {
                  r11 = parse_mediaQuery();
                  if (r11 !== null) {
                    r5 = [r8, r9, r10, r11];
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(q) {return q;})(r11);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return new N('mediaQueryList', rest);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_mediaQuery() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_mediaInterpolation();
        if (r3 === null) {
          r3 = parse_mediaType();
          if (r3 === null) {
            r3 = parse_mediaFeature();
          }
        }
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse__();
          if (r8 !== null) {
            if (input.substr(pos, 3).toLowerCase() === "and") {
              r9 = input.substr(pos, 3);
              pos += 3;
            } else {
              r9 = null;
              if (reportFailures === 0) {
                matchFailed("\"and\"");
              }
            }
            if (r9 !== null) {
              r10 = parse__();
              if (r10 !== null) {
                r11 = parse_mediaInterpolation();
                if (r11 === null) {
                  r11 = parse_mediaFeature();
                }
                if (r11 !== null) {
                  r5 = [r8, r9, r10, r11];
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(m) {return m})(r11);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse__();
            if (r8 !== null) {
              if (input.substr(pos, 3).toLowerCase() === "and") {
                r9 = input.substr(pos, 3);
                pos += 3;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\"and\"");
                }
              }
              if (r9 !== null) {
                r10 = parse__();
                if (r10 !== null) {
                  r11 = parse_mediaInterpolation();
                  if (r11 === null) {
                    r11 = parse_mediaFeature();
                  }
                  if (r11 !== null) {
                    r5 = [r8, r9, r10, r11];
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(m) {return m})(r11);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return new N('mediaQuery', rest);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_mediaInterpolation() {
        var r0, r1;
        
        r1 = pos;
        r0 = parse_variable();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('mediaInterpolation', [value]);
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_mediaType() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        r5 = pos;
        if (input.substr(pos, 4).toLowerCase() === "only") {
          r6 = input.substr(pos, 4);
          pos += 4;
        } else {
          r6 = null;
          if (reportFailures === 0) {
            matchFailed("\"only\"");
          }
        }
        if (r6 === null) {
          if (input.substr(pos, 3).toLowerCase() === "not") {
            r6 = input.substr(pos, 3);
            pos += 3;
          } else {
            r6 = null;
            if (reportFailures === 0) {
              matchFailed("\"not\"");
            }
          }
        }
        if (r6 !== null) {
          r7 = parse__();
          if (r7 !== null) {
            r3 = [r6, r7];
          } else {
            r3 = null;
            pos = r5;
          }
        } else {
          r3 = null;
          pos = r5;
        }
        if (r3 !== null) {
          reportedPos = r4;
          r3 = (function(m) {return m;})(r6);
        }
        if (r3 === null) {
          pos = r4;
        }
        r3 = r3 !== null ? r3 : "";
        if (r3 !== null) {
          r4 = parse_identifier();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(modifier, value) {
        		return new N('mediaType', [modifier || null, value]);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_mediaFeature() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 40) {
          r3 = "(";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_identifier();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r8 = pos;
                r9 = pos;
                if (input.charCodeAt(pos) === 58) {
                  r10 = ":";
                  pos++;
                } else {
                  r10 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":\"");
                  }
                }
                if (r10 !== null) {
                  r11 = parse__();
                  if (r11 !== null) {
                    r12 = parse_list();
                    if (r12 !== null) {
                      r13 = parse__();
                      if (r13 !== null) {
                        r7 = [r10, r11, r12, r13];
                      } else {
                        r7 = null;
                        pos = r9;
                      }
                    } else {
                      r7 = null;
                      pos = r9;
                    }
                  } else {
                    r7 = null;
                    pos = r9;
                  }
                } else {
                  r7 = null;
                  pos = r9;
                }
                if (r7 !== null) {
                  reportedPos = r8;
                  r7 = (function(v) {return v;})(r12);
                }
                if (r7 === null) {
                  pos = r8;
                }
                r7 = r7 !== null ? r7 : "";
                if (r7 !== null) {
                  if (input.charCodeAt(pos) === 41) {
                    r8 = ")";
                    pos++;
                  } else {
                    r8 = null;
                    if (reportFailures === 0) {
                      matchFailed("\")\"");
                    }
                  }
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(name, value) {
        		return new N('mediaFeature', [name, value || null]);
        	})(r5, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_extend() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 7).toLowerCase() === "@extend") {
          r3 = input.substr(pos, 7);
          pos += 7;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@extend\"");
          }
        }
        if (r3 !== null) {
          if (input.substr(pos, 4).toLowerCase() === "-all") {
            r4 = input.substr(pos, 4);
            pos += 4;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"-all\"");
            }
          }
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r5 = parse__();
            if (r5 !== null) {
              r6 = parse_selectorList();
              if (r6 !== null) {
                r7 = parse__();
                if (r7 !== null) {
                  r8 = parse_semicolon();
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(all, selectorList) {
        		return new N('extend', [selectorList], {all: !!all});
        	})(r4, r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_void() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 5).toLowerCase() === "@void") {
          r3 = input.substr(pos, 5);
          pos += 5;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@void\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_ruleList();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(ruleList) {
        		return new N('void', [ruleList]);
        	})(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_block() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 6).toLowerCase() === "@block") {
          r3 = input.substr(pos, 6);
          pos += 6;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@block\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_ruleList();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(ruleList) {
        		return new N('block', [ruleList]);
        	})(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_import() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 7).toLowerCase() === "@import") {
          r3 = input.substr(pos, 7);
          pos += 7;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@import\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_string();
            if (r5 === null) {
              r5 = parse_url();
              if (r5 === null) {
                r5 = parse_variable();
              }
            }
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r8 = pos;
                r9 = pos;
                r10 = parse_mediaQueryList();
                if (r10 !== null) {
                  r11 = parse__();
                  if (r11 !== null) {
                    r7 = [r10, r11];
                  } else {
                    r7 = null;
                    pos = r9;
                  }
                } else {
                  r7 = null;
                  pos = r9;
                }
                if (r7 !== null) {
                  reportedPos = r8;
                  r7 = (function(m) {return m;})(r10);
                }
                if (r7 === null) {
                  pos = r8;
                }
                r7 = r7 !== null ? r7 : "";
                if (r7 !== null) {
                  r8 = parse_semicolon();
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value, mediaQueryList) {
        		return new N('import', [value, mediaQueryList || null]);
        	})(r5, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_url() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 4).toLowerCase() === "url(") {
          r3 = input.substr(pos, 4);
          pos += 4;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"url(\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_string();
            if (r5 === null) {
              r5 = parse_urlAddr();
            }
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  r7 = ")";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('url', [value]);
        	})(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_urlAddr() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        r2 = pos;
        if (/^[!#$%&*-~]/.test(input.charAt(pos))) {
          r3 = input.charAt(pos);
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("[!#$%&*-~]");
          }
        }
        if (r3 !== null) {
          r0 = [];
          while (r3 !== null) {
            r0.push(r3);
            if (/^[!#$%&*-~]/.test(input.charAt(pos))) {
              r3 = input.charAt(pos);
              pos++;
            } else {
              r3 = null;
              if (reportFailures === 0) {
                matchFailed("[!#$%&*-~]");
              }
            }
          }
        } else {
          r0 = null;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r2);
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return value;
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_if() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 3).toLowerCase() === "@if") {
          r3 = input.substr(pos, 3);
          pos += 3;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@if\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_list();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r7 = parse_ruleList();
                if (r7 !== null) {
                  r9 = pos;
                  r10 = pos;
                  r11 = parse__();
                  if (r11 !== null) {
                    r12 = parse_elseIf();
                    if (r12 === null) {
                      r12 = parse_else();
                    }
                    if (r12 !== null) {
                      r8 = [r11, r12];
                    } else {
                      r8 = null;
                      pos = r10;
                    }
                  } else {
                    r8 = null;
                    pos = r10;
                  }
                  if (r8 !== null) {
                    reportedPos = r9;
                    r8 = (function(e) {return e;})(r12);
                  }
                  if (r8 === null) {
                    pos = r9;
                  }
                  r8 = r8 !== null ? r8 : "";
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(condition, consequence, alternative) {
        		return new N('if', [condition, consequence, alternative || null]);
        	})(r5, r7, r8);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_elseIf() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 5).toLowerCase() === "@else") {
          r3 = input.substr(pos, 5);
          pos += 5;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@else\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            if (input.substr(pos, 2).toLowerCase() === "if") {
              r5 = input.substr(pos, 2);
              pos += 2;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"if\"");
              }
            }
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r7 = parse_list();
                if (r7 !== null) {
                  r8 = parse__();
                  if (r8 !== null) {
                    r9 = parse_ruleList();
                    if (r9 !== null) {
                      r11 = pos;
                      r12 = pos;
                      r13 = parse__();
                      if (r13 !== null) {
                        r14 = parse_elseIf();
                        if (r14 === null) {
                          r14 = parse_else();
                        }
                        if (r14 !== null) {
                          r10 = [r13, r14];
                        } else {
                          r10 = null;
                          pos = r12;
                        }
                      } else {
                        r10 = null;
                        pos = r12;
                      }
                      if (r10 !== null) {
                        reportedPos = r11;
                        r10 = (function(e) {return e;})(r14);
                      }
                      if (r10 === null) {
                        pos = r11;
                      }
                      r10 = r10 !== null ? r10 : "";
                      if (r10 !== null) {
                        r0 = [r3, r4, r5, r6, r7, r8, r9, r10];
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(condition, consequence, alternative) {
        		return new N('if', [condition, consequence, alternative || null]);
        	})(r7, r9, r10);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_else() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 5).toLowerCase() === "@else") {
          r3 = input.substr(pos, 5);
          pos += 5;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@else\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_ruleList();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(ruleList) {
        		return ruleList;
        	})(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_for() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 4).toLowerCase() === "@for") {
          r3 = input.substr(pos, 4);
          pos += 4;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@for\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_variable();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r8 = pos;
                r9 = pos;
                if (input.charCodeAt(pos) === 44) {
                  r10 = ",";
                  pos++;
                } else {
                  r10 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (r10 !== null) {
                  r11 = parse__();
                  if (r11 !== null) {
                    r12 = parse_variable();
                    if (r12 !== null) {
                      r13 = parse__();
                      if (r13 !== null) {
                        r7 = [r10, r11, r12, r13];
                      } else {
                        r7 = null;
                        pos = r9;
                      }
                    } else {
                      r7 = null;
                      pos = r9;
                    }
                  } else {
                    r7 = null;
                    pos = r9;
                  }
                } else {
                  r7 = null;
                  pos = r9;
                }
                if (r7 !== null) {
                  reportedPos = r8;
                  r7 = (function(i) {return i})(r12);
                }
                if (r7 === null) {
                  pos = r8;
                }
                r7 = r7 !== null ? r7 : "";
                if (r7 !== null) {
                  r9 = pos;
                  r10 = pos;
                  if (input.substr(pos, 2).toLowerCase() === "by") {
                    r11 = input.substr(pos, 2);
                    pos += 2;
                  } else {
                    r11 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"by\"");
                    }
                  }
                  if (r11 !== null) {
                    r12 = parse__();
                    if (r12 !== null) {
                      r13 = parse_additiveExpression();
                      if (r13 !== null) {
                        r14 = parse__();
                        if (r14 !== null) {
                          r8 = [r11, r12, r13, r14];
                        } else {
                          r8 = null;
                          pos = r10;
                        }
                      } else {
                        r8 = null;
                        pos = r10;
                      }
                    } else {
                      r8 = null;
                      pos = r10;
                    }
                  } else {
                    r8 = null;
                    pos = r10;
                  }
                  if (r8 !== null) {
                    reportedPos = r9;
                    r8 = (function(a) {return a;})(r13);
                  }
                  if (r8 === null) {
                    pos = r9;
                  }
                  r8 = r8 !== null ? r8 : "";
                  if (r8 !== null) {
                    if (input.substr(pos, 2).toLowerCase() === "in") {
                      r9 = input.substr(pos, 2);
                      pos += 2;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"in\"");
                      }
                    }
                    if (r9 !== null) {
                      r10 = parse__();
                      if (r10 !== null) {
                        r11 = parse_list();
                        if (r11 !== null) {
                          r12 = parse__();
                          if (r12 !== null) {
                            r13 = parse_ruleList();
                            if (r13 !== null) {
                              r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13];
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value, index, step, list, ruleList) {
        		return new N('for', [value, index || null, step || null, list, ruleList]);
        	})(r5, r7, r8, r11, r13);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_mixin() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 6) === "@mixin") {
          r3 = "@mixin";
          pos += 6;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@mixin\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          r6 = pos;
          r7 = parse__();
          if (r7 !== null) {
            r8 = parse_parameterList();
            if (r8 !== null) {
              r4 = [r7, r8];
            } else {
              r4 = null;
              pos = r6;
            }
          } else {
            r4 = null;
            pos = r6;
          }
          if (r4 !== null) {
            reportedPos = r5;
            r4 = (function(p) {return p;})(r8);
          }
          if (r4 === null) {
            pos = r5;
          }
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r5 = parse__();
            if (r5 !== null) {
              r6 = parse_ruleList();
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(parameterList, ruleList) {
        		return new N('mixin', [parameterList || null, ruleList]);
        	})(r4, r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_parameterList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_parameter();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse__();
          if (r8 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r9 = ",";
              pos++;
            } else {
              r9 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r9 !== null) {
              r10 = parse__();
              if (r10 !== null) {
                r11 = parse_parameter();
                if (r11 !== null) {
                  r5 = [r8, r9, r10, r11];
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(p) {return p;})(r11);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse__();
            if (r8 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r9 = ",";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r9 !== null) {
                r10 = parse__();
                if (r10 !== null) {
                  r11 = parse_parameter();
                  if (r11 !== null) {
                    r5 = [r8, r9, r10, r11];
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(p) {return p;})(r11);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return new N('parameterList', rest);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_parameter() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_variable();
        if (r3 !== null) {
          r5 = pos;
          r6 = pos;
          r7 = parse__();
          if (r7 !== null) {
            if (input.charCodeAt(pos) === 61) {
              r8 = "=";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (r8 !== null) {
              r9 = parse__();
              if (r9 !== null) {
                r10 = parse_nonCommaList();
                if (r10 !== null) {
                  r4 = [r7, r8, r9, r10];
                } else {
                  r4 = null;
                  pos = r6;
                }
              } else {
                r4 = null;
                pos = r6;
              }
            } else {
              r4 = null;
              pos = r6;
            }
          } else {
            r4 = null;
            pos = r6;
          }
          if (r4 !== null) {
            reportedPos = r5;
            r4 = (function(s) {return s;})(r10);
          }
          if (r4 === null) {
            pos = r5;
          }
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(variable, value) {
        		return new N('parameter', [variable, value || null]);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_mixinCall() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_variable();
        if (r3 !== null) {
          r5 = pos;
          r6 = pos;
          if (input.charCodeAt(pos) === 40) {
            r7 = "(";
            pos++;
          } else {
            r7 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (r7 !== null) {
            r8 = parse__();
            if (r8 !== null) {
              r9 = parse_argumentList();
              r9 = r9 !== null ? r9 : "";
              if (r9 !== null) {
                r10 = parse__();
                if (r10 !== null) {
                  if (input.charCodeAt(pos) === 41) {
                    r11 = ")";
                    pos++;
                  } else {
                    r11 = null;
                    if (reportFailures === 0) {
                      matchFailed("\")\"");
                    }
                  }
                  if (r11 !== null) {
                    r4 = [r7, r8, r9, r10, r11];
                  } else {
                    r4 = null;
                    pos = r6;
                  }
                } else {
                  r4 = null;
                  pos = r6;
                }
              } else {
                r4 = null;
                pos = r6;
              }
            } else {
              r4 = null;
              pos = r6;
            }
          } else {
            r4 = null;
            pos = r6;
          }
          if (r4 !== null) {
            reportedPos = r5;
            r4 = (function(a) {return a;})(r9);
          }
          if (r4 === null) {
            pos = r5;
          }
          if (r4 !== null) {
            r5 = parse__();
            if (r5 !== null) {
              r6 = parse_semicolon();
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(name, argumentList) {
        		return new N('mixinCall', [name, argumentList || null]);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_keyframes() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 64) {
          r3 = "@";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          r6 = pos;
          if (input.charCodeAt(pos) === 45) {
            r7 = "-";
            pos++;
          } else {
            r7 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (r7 !== null) {
            r9 = pos;
            r10 = pos;
            if (/^[a-z_]/i.test(input.charAt(pos))) {
              r11 = input.charAt(pos);
              pos++;
            } else {
              r11 = null;
              if (reportFailures === 0) {
                matchFailed("[a-z_]i");
              }
            }
            if (r11 !== null) {
              r12 = [];
              if (/^[a-z0-9_]/i.test(input.charAt(pos))) {
                r13 = input.charAt(pos);
                pos++;
              } else {
                r13 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-z0-9_]i");
                }
              }
              while (r13 !== null) {
                r12.push(r13);
                if (/^[a-z0-9_]/i.test(input.charAt(pos))) {
                  r13 = input.charAt(pos);
                  pos++;
                } else {
                  r13 = null;
                  if (reportFailures === 0) {
                    matchFailed("[a-z0-9_]i");
                  }
                }
              }
              if (r12 !== null) {
                r8 = [r11, r12];
              } else {
                r8 = null;
                pos = r10;
              }
            } else {
              r8 = null;
              pos = r10;
            }
            if (r8 !== null) {
              r8 = input.substring(pos, r9);
            }
            if (r8 !== null) {
              if (input.charCodeAt(pos) === 45) {
                r9 = "-";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (r9 !== null) {
                r4 = [r7, r8, r9];
              } else {
                r4 = null;
                pos = r6;
              }
            } else {
              r4 = null;
              pos = r6;
            }
          } else {
            r4 = null;
            pos = r6;
          }
          if (r4 !== null) {
            reportedPos = r5;
            r4 = (function(p) {return p;})(r8);
          }
          if (r4 === null) {
            pos = r5;
          }
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            if (input.substr(pos, 9).toLowerCase() === "keyframes") {
              r5 = input.substr(pos, 9);
              pos += 9;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"keyframes\"");
              }
            }
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r7 = parse_identifier();
                if (r7 !== null) {
                  r8 = parse__();
                  if (r8 !== null) {
                    r9 = parse_keyframeList();
                    if (r9 !== null) {
                      r0 = [r3, r4, r5, r6, r7, r8, r9];
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(prefix, name, keyframeList) {
        		return new N('keyframes', [prefix || null, name, keyframeList]);
        	})(r4, r7, r9);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_keyframeList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 123) {
          r3 = "{";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_keyframe();
            if (r5 !== null) {
              r6 = [];
              r8 = pos;
              r9 = pos;
              r10 = parse__();
              if (r10 !== null) {
                r11 = parse_keyframe();
                if (r11 !== null) {
                  r7 = [r10, r11];
                } else {
                  r7 = null;
                  pos = r9;
                }
              } else {
                r7 = null;
                pos = r9;
              }
              if (r7 !== null) {
                reportedPos = r8;
                r7 = (function(k) {return k;})(r11);
              }
              if (r7 === null) {
                pos = r8;
              }
              while (r7 !== null) {
                r6.push(r7);
                r8 = pos;
                r9 = pos;
                r10 = parse__();
                if (r10 !== null) {
                  r11 = parse_keyframe();
                  if (r11 !== null) {
                    r7 = [r10, r11];
                  } else {
                    r7 = null;
                    pos = r9;
                  }
                } else {
                  r7 = null;
                  pos = r9;
                }
                if (r7 !== null) {
                  reportedPos = r8;
                  r7 = (function(k) {return k;})(r11);
                }
                if (r7 === null) {
                  pos = r8;
                }
              }
              if (r6 !== null) {
                r7 = parse__();
                if (r7 !== null) {
                  if (input.charCodeAt(pos) === 125) {
                    r8 = "}";
                    pos++;
                  } else {
                    r8 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return new N('keyframeList', rest);
        	})(r5, r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_keyframe() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_keyframeSelectorList();
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_propertyList();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(keyframeSelectorList, propertyList) {
        		return new N('keyframe', [keyframeSelectorList, propertyList]);
        	})(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_keyframeSelectorList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_keyframeSelector();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r9 = pos;
          r10 = parse__();
          if (r10 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r11 = ",";
              pos++;
            } else {
              r11 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r11 !== null) {
              r12 = parse__();
              if (r12 !== null) {
                r8 = [r10, r11, r12];
              } else {
                r8 = null;
                pos = r9;
              }
            } else {
              r8 = null;
              pos = r9;
            }
          } else {
            r8 = null;
            pos = r9;
          }
          if (r8 !== null) {
            r9 = parse_keyframeSelector();
            if (r9 !== null) {
              r5 = [r8, r9];
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(k) {return k;})(r9);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r9 = pos;
            r10 = parse__();
            if (r10 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r11 = ",";
                pos++;
              } else {
                r11 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r11 !== null) {
                r12 = parse__();
                if (r12 !== null) {
                  r8 = [r10, r11, r12];
                } else {
                  r8 = null;
                  pos = r9;
                }
              } else {
                r8 = null;
                pos = r9;
              }
            } else {
              r8 = null;
              pos = r9;
            }
            if (r8 !== null) {
              r9 = parse_keyframeSelector();
              if (r9 !== null) {
                r5 = [r8, r9];
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(k) {return k;})(r9);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return new N('keyframeSelectorList', rest);
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_keyframeSelector() {
        var r0, r1;
        
        r1 = pos;
        if (input.substr(pos, 4).toLowerCase() === "from") {
          r0 = input.substr(pos, 4);
          pos += 4;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"from\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 2).toLowerCase() === "to") {
            r0 = input.substr(pos, 2);
            pos += 2;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"to\"");
            }
          }
          if (r0 === null) {
            r0 = parse_percentage();
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('keyframeSelector', [value]);
        	})(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_propertyList() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 123) {
          r3 = "{";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_properties();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 125) {
                  r7 = "}";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}\"");
                  }
                }
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(properties) {
        		return new N('propertyList', properties);
        	})(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_properties() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_property();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse__();
          if (r8 !== null) {
            r9 = parse_property();
            if (r9 !== null) {
              r5 = [r8, r9];
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(p) {return p;})(r9);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse__();
            if (r8 !== null) {
              r9 = parse_property();
              if (r9 !== null) {
                r5 = [r8, r9];
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(p) {return p;})(r9);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
        		rest.unshift(first);
        		return rest;
        	})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_fontFace() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 10).toLowerCase() === "@font-face") {
          r3 = input.substr(pos, 10);
          pos += 10;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@font-face\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_propertyList();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(propertyList) {
        		return new N('fontFace', [propertyList]);
        	})(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_charset() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 8).toLowerCase() === "@charset") {
          r3 = input.substr(pos, 8);
          pos += 8;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@charset\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_string();
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                r7 = parse_semicolon();
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return new N('charset', [value]);
        	})(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse__() {
        var r0;
        
        r0 = parse_s();
        r0 = r0 !== null ? r0 : "";
        return r0;
      }
      
      function parse_s() {
        var r0, r1;
        
        r1 = parse_ws();
        if (r1 === null) {
          r1 = parse_singleLineComment();
          if (r1 === null) {
            r1 = parse_multiLineComment();
          }
        }
        if (r1 !== null) {
          r0 = [];
          while (r1 !== null) {
            r0.push(r1);
            r1 = parse_ws();
            if (r1 === null) {
              r1 = parse_singleLineComment();
              if (r1 === null) {
                r1 = parse_multiLineComment();
              }
            }
          }
        } else {
          r0 = null;
        }
        return r0;
      }
      
      function parse_ws() {
        var r0, r1;
        
        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
          r1 = input.charAt(pos);
          pos++;
        } else {
          r1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\r\\n\\f]");
          }
        }
        if (r1 !== null) {
          r0 = [];
          while (r1 !== null) {
            r0.push(r1);
            if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
              r1 = input.charAt(pos);
              pos++;
            } else {
              r1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\t\\r\\n\\f]");
              }
            }
          }
        } else {
          r0 = null;
        }
        return r0;
      }
      
      function parse_singleLineComment() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 2) === "//") {
          r2 = "//";
          pos += 2;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"//\"");
          }
        }
        if (r2 !== null) {
          r3 = [];
          if (/^[^\r\n\f]/.test(input.charAt(pos))) {
            r4 = input.charAt(pos);
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\r\\n\\f]");
            }
          }
          while (r4 !== null) {
            r3.push(r4);
            if (/^[^\r\n\f]/.test(input.charAt(pos))) {
              r4 = input.charAt(pos);
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\r\\n\\f]");
              }
            }
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_multiLineComment() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 2) === "/*") {
          r3 = "/*";
          pos += 2;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          r4 = [];
          if (/^[^*]/.test(input.charAt(pos))) {
            r6 = input.charAt(pos);
            pos++;
          } else {
            r6 = null;
            if (reportFailures === 0) {
              matchFailed("[^*]");
            }
          }
          if (r6 === null) {
            r7 = pos;
            if (input.charCodeAt(pos) === 42) {
              r8 = "*";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\"*\"");
              }
            }
            if (r8 !== null) {
              if (/^[^\/]/.test(input.charAt(pos))) {
                r9 = input.charAt(pos);
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\/]");
                }
              }
              if (r9 !== null) {
                r6 = [r8, r9];
              } else {
                r6 = null;
                pos = r7;
              }
            } else {
              r6 = null;
              pos = r7;
            }
          }
          while (r6 !== null) {
            r4.push(r6);
            if (/^[^*]/.test(input.charAt(pos))) {
              r6 = input.charAt(pos);
              pos++;
            } else {
              r6 = null;
              if (reportFailures === 0) {
                matchFailed("[^*]");
              }
            }
            if (r6 === null) {
              r7 = pos;
              if (input.charCodeAt(pos) === 42) {
                r8 = "*";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*\"");
                }
              }
              if (r8 !== null) {
                if (/^[^\/]/.test(input.charAt(pos))) {
                  r9 = input.charAt(pos);
                  pos++;
                } else {
                  r9 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\/]");
                  }
                }
                if (r9 !== null) {
                  r6 = [r8, r9];
                } else {
                  r6 = null;
                  pos = r7;
                }
              } else {
                r6 = null;
                pos = r7;
              }
            }
          }
          if (r4 !== null) {
            r4 = input.substring(pos, r5);
          }
          if (r4 !== null) {
            if (input.substr(pos, 2) === "*/") {
              r5 = "*/";
              pos += 2;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(value) {
        		return value;
        	})(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_nl() {
        var r0;
        
        if (input.substr(pos, 2) === "\r\n") {
          r0 = "\r\n";
          pos += 2;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\\n\"");
          }
        }
        if (r0 === null) {
          if (/^[\n\r\f]/.test(input.charAt(pos))) {
            r0 = input.charAt(pos);
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("[\\n\\r\\f]");
            }
          }
        }
        return r0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      	var _ = require('../helper');
      	var Node = require('../node');
      
      	var N = function() {
      		var node = Node.apply(this, arguments);
      
      		node.loc = options.loc || {
      			line: line(),
      			column: column(),
      			offset: offset()
      		};
      
      		return node;
      	};
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        reportedPos = Math.max(pos, rightmostFailuresPos);
        var found = reportedPos < input.length ? input.charAt(reportedPos) : null;
        var reportedPosDetails = computeReportedPosDetails();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          reportedPos,
          reportedPosDetails.line,
          reportedPosDetails.column
        );
      }
      
      return result;
    }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  subclass(result.SyntaxError, Error);
  
  return result;
})();
